{"version":3,"sources":["video.js","App.js","serviceWorker.js","index.js"],"names":["constraints","video","audio","connection","interval","Video","videoPlayer","useRef","displayPlayer","useState","connectWS","queryParams","window","location","search","mId","split","slice","indexOf","length","usr","WebSocket","useEffect","MozWebSocket","navigator","mediaDevices","getUserMedia","then","stream","current","srcObject","onmessage","message","src","data","onclose","e","console","log","onopen","open","setInterval","readyState","canvas","document","createElement","height","videoHeight","width","videoWidth","getContext","drawImage","toDataURL","send","clearInterval","ref","autoPlay","onClick","close","alert","App","className","Boolean","hostname","match","ReactDOM","render","StrictMode","name","content","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"kPAEMA,EAAc,CAChBC,OAAQ,EACRC,OAAQ,GAGRC,EAAa,KACbC,EAAW,KA2EAC,EAzED,WACV,IAAMC,EAAcC,mBACdC,EAAgBD,mBAFR,EAGYE,mBAAS,GAHrB,mBAKRC,GALQ,UAKI,WACd,IAAIC,EAAcC,OAAOC,SAASC,OAClC,GAAGH,EAAY,CAEX,IAAII,GADJJ,EAAcA,EAAYK,MAAM,MACV,GAAGC,MAAMN,EAAY,GAAGO,QAAQ,KAAK,EAAEP,EAAY,GAAGQ,QACxEC,EAAMT,EAAY,GAAGM,MAAMN,EAAY,GAAGO,QAAQ,KAAK,EAAEP,EAAY,GAAGQ,QAE5EhB,EAAa,IAAIkB,UAAJ,mDAA0DN,EAA1D,iBAAsEK,OAmD3F,OAvCAE,qBAAU,WACNV,OAAOS,UAAYT,OAAOS,WAAaT,OAAOW,aAE9CC,UAAUC,aAAaC,aAAa1B,GAAa2B,MAAK,SAACC,GACnDlB,IACAJ,EAAYuB,QAAQC,UAAYF,EAC7BzB,IACCA,EAAW4B,UAAY,SAACC,GAEpBxB,EAAcqB,QAAQI,IAAMD,EAAQE,MAQxC/B,EAAWgC,QAAU,SAAAC,GACjBC,QAAQC,IAAR,oCAAsCF,KAE1CjC,EAAWoC,OAAS,SAACC,GACbpC,EAAWqC,aAAY,WACvB,GAAGtC,GAAwC,IAA1BA,EAAWuC,WAAiB,CACzC,IAAIC,EAASC,SAASC,cAAc,UACpCF,EAAOG,OAASxC,EAAYuB,QAAQkB,YACpCJ,EAAOK,MAAQ1C,EAAYuB,QAAQoB,WACnCN,EAAOO,WAAW,MAAMC,UAAU7C,EAAYuB,QAAQ,EAAE,GACxD,IAAMK,EAAOS,EAAOS,UAAU,aAAa,IAC3CjD,EAAWkD,KAAKnB,QAEhBoB,cAAclD,GACdM,MAEN,YAIhB,IAGE,oCACI,2BAAO6C,IAAKjD,EAAakD,UAAQ,IACjC,yBAAKD,IAAK/C,IACV,4BAAQiD,QAnDA,WACTtD,IACCmD,cAAclD,GACdD,EAAWuD,QACXC,MAAM,iBA+CN,c,MCjEGC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BlD,OAAOC,SAASkD,UAEe,UAA7BnD,OAAOC,SAASkD,UAEhBnD,OAAOC,SAASkD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,0BAAMC,KAAK,WAAWC,QAAQ,uCAC9B,kBAAC,EAAD,OAEFzB,SAAS0B,eAAe,SDwHpB,kBAAmB9C,WACrBA,UAAU+C,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAM5C,c","file":"static/js/main.3ff6210d.chunk.js","sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\r\n\r\nconst constraints = {\r\n    video : true,\r\n    audio : true\r\n}\r\n\r\nlet connection = null;\r\nlet interval = null;\r\n\r\nconst Video = ()=>{\r\n    const videoPlayer = useRef();\r\n    const displayPlayer = useRef();\r\n    const [users, setUsers] = useState(1);\r\n\r\n    const connectWS = ()=>{\r\n        let queryParams = window.location.search;\r\n        if(queryParams){\r\n            queryParams = queryParams.split('&');\r\n            let mId = queryParams[0].slice(queryParams[0].indexOf('=')+1,queryParams[0].length);\r\n            let usr = queryParams[1].slice(queryParams[1].indexOf('=')+1,queryParams[1].length);\r\n            //connection = new WebSocket(`ws://127.0.0.1:4000/?mid=${mId}&user=${usr}`);\r\n            connection = new WebSocket(`wss://video-socket-be.herokuapp.com/?mid=${mId}&user=${usr}`);\r\n        }\r\n    }\r\n\r\n    const endCall = ()=>{\r\n        if(connection){\r\n            clearInterval(interval);\r\n            connection.close();\r\n            alert(\"Call Ended\");\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        window.WebSocket = window.WebSocket || window.MozWebSocket;\r\n\r\n        navigator.mediaDevices.getUserMedia(constraints).then((stream)=>{\r\n            connectWS();\r\n            videoPlayer.current.srcObject = stream;\r\n            if(connection){\r\n                connection.onmessage = (message)=>{\r\n                    //let data = JSON.parse(message.data);\r\n                    displayPlayer.current.src = message.data;\r\n                    //data.msg;\r\n                    /* if(data.usr === 1){\r\n                        videoPlayer.current.classList = \"onlyvideo\";\r\n                    }else{\r\n                        displayPlayer.current.src = data.msg;\r\n                    } */\r\n                }\r\n                connection.onclose = e => {\r\n                    console.log(`CLosing connection --> ${e}`);\r\n                };\r\n                connection.onopen = (open)=>{\r\n                        interval = setInterval(()=>{\r\n                        if(connection && connection.readyState === 1){\r\n                            let canvas = document.createElement('canvas');\r\n                            canvas.height = videoPlayer.current.videoHeight;\r\n                            canvas.width = videoPlayer.current.videoWidth;\r\n                            canvas.getContext('2d').drawImage(videoPlayer.current,0,0);\r\n                            const data = canvas.toDataURL('image/jpeg',0.70);\r\n                            connection.send(data);\r\n                        }else{\r\n                            clearInterval(interval);\r\n                            connectWS();\r\n                        }\r\n                    },100);\r\n                }\r\n            }\r\n        })\r\n    },[]);\r\n\r\n    return (\r\n        <>\r\n            <video ref={videoPlayer} autoPlay ></video>\r\n            <img ref={displayPlayer}></img>\r\n            <button onClick={endCall} >End Call</button>\r\n        </>\r\n    );    \r\n      \r\n}\r\n\r\nexport default Video;","import React from 'react';\r\nimport Video from './video';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Video/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\"/>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}